// import { Redis } from "@upstash/redis/cloudflare";
// import { Context, Env, Hono } from "hono";
// import { env } from "hono/adapter";
// import { BlankInput } from "hono/types";
// import { handle } from "hono/vercel";

// export const runtime = "edge";

// const app = new Hono().basePath("/api");

// type EnvConfig = {
//   UPSTASH_REDIS_REST_TOKEN: string;
//   UPSTASH_REDIS_REST_URL: string;
// };

// const { UPSTASH_REDIS_REST_TOKEN, UPSTASH_REDIS_REST_URL } = env<EnvConfig>(
//   {} as Context<Env, "/api/search", BlankInput>
// );

// const redis = new Redis({
//   token: UPSTASH_REDIS_REST_TOKEN,
//   url: UPSTASH_REDIS_REST_URL,
// });

// app.get("/search", async (c) => {
//   try {
//     const query = c.req.query("q")?.toUpperCase();

//     const starting = Date.now();

//     if (!query) {
//       return c.json({ message: "Invalid search query" }, { status: 400 });
//     }

//     if (!redis) {
//       return c.json({ message: "DB Error" }, { status: 500 });
//     }

//     const results = [];
//     const rank = await redis.zrank("terms", query);

//     // console.log("Rank: " + rank + " Query: " + query);

//     if (rank !== null && rank !== undefined) {
//       const temp = await redis.zrange<string[]>("terms", rank, rank + 100); // results that starts with query
//       // console.log("TEMP : " + temp);

//       for (const match of temp) {
//         if (!match.startsWith(query)) {
//           break;
//         } else if (match.endsWith("*")) {
//           // console.log("MATCH : " + match);
//           // if the match is a country name
//           results.push(match.substring(0, match.length - 1)); // push the country name without *
//         }
//       }
//     }

//     const ended = Date.now();

//     return c.json(
//       { duration: ended - starting, results: results },
//       { status: 200 }
//     );
//   } catch (error) {
//     console.error(error);

//     return c.json<{ results: string[]; message: string }>({
//       results: [],
//       message: "Something went wrong",
//     });
//   }
// });

// export const GET = handle(app);